{
	"DisjointSet": {
		"prefix": "dsu",
		"body": [
		  "class DisjointSet {",
		  "public:",
		  "    vector<int> parent, size;",
		  "    DisjointSet(int n) {",
		  "        parent.resize(n);",
		  "        size.resize(n);",
		  "        for (int i = 0; i < n; i++) {",
		  "            parent[i] = i;",
		  "            size[i] = 1;",
		  "        }",
		  "    }",
		  "",
		  "    int ultimateParent(int node) {",
		  "        if (node == parent[node])",
		  "            return node;",
		  "        return parent[node] = ultimateParent(parent[node]);",
		  "    }",
		  "",
		  "    void unionBySize(int u, int v) {",
		  "        int uparent_u = ultimateParent(u);",
		  "        int uparent_v = ultimateParent(v);",
		  "        if (uparent_u == uparent_v) return;",
		  "        if (size[uparent_u] < size[uparent_v]) {",
		  "            parent[uparent_u] = uparent_v;",
		  "            size[uparent_v] += size[uparent_u];",
		  "        }",
		  "        else {",
		  "            parent[uparent_v] = uparent_u;",
		  "            size[uparent_u] += size[uparent_v];",
		  "        }",
		  "    }",
		  "};",
		  "",
		  "// DisjointSet ds(n); n-> no of vertices",
		  "// always use ds.ultimateParent(u) to get parent of u, never use ds.parent[u]",
		  "// ds.unionBySize(u,v);"
		],
		"description": "DisjointSet"
	  }
}