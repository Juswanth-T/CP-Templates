{
	"StringHashing": {
	"prefix": "stringhashing",
	"body": [
		"class SubstringHash {",
		"    string str;",
		"    vector<int> hash1, hash2;",
		"    int prime, mod1, mod2, len;",
		"    vector<int> p_pow1, p_pow2;",
		"",
		"    // Initialize prefix hashes for a given modulus",
		"    void initPrefixHash(vector<int> &hash, int mod) {",
		"        hash.resize(len, 0);",
		"        int hash_val = 0;",
		"        for (int i = 0; i < len; ++i) {",
		"            hash_val = (hash_val * prime + (str[i] - '0' + 1)) % mod;",
		"            hash[i] = hash_val;",
		"        }",
		"    }",
		"",
		"    // Precompute powers of the prime for both moduli",
		"    void initPowers() {",
		"        p_pow1.resize(len + 1, 1);",
		"        p_pow2.resize(len + 1, 1);",
		"        for (int i = 1; i <= len; ++i) {",
		"            p_pow1[i] = (p_pow1[i - 1] * prime) % mod1;",
		"            p_pow2[i] = (p_pow2[i - 1] * prime) % mod2;",
		"        }",
		"    }",
		"",
		"    // Compute hash for substring [l, r]",
		"    int computeHash(int l, int r, vector<int> &hash, int mod, vector<int> &p_pow) {",
		"        int res = hash[r];",
		"        if (l != 0) res = (res - ((hash[l - 1] * p_pow[r - l + 1]) % mod) + mod) % mod;",
		"        return res;",
		"    }",
		"",
		"public:",
		"    // Constructor to initialize the hash with optional random moduli",
		"    SubstringHash(string &s, bool randomize) {",
		"        str = s;",
		"        len = s.size();",
		"        prime = 37;",
		"",
		"        if (randomize) {",
		"            // Randomize moduli for double hashing",
		"            mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
		"            uniform_int_distribution<int> distrib(1e8, 1e9 + 100);",
		"            mod1 = distrib(rng);",
		"            mod2 = distrib(rng);",
		"        } else {",
		"            mod1 = 1000005737;",
		"            mod2 = 1000000181;",
		"            // mod1 = 1000000016507;",
		"            // mod2 = 1000000016531;",
		"            // higher mod can lead to overflow issues",
		"",
		"        }",
		"",
		"        initPowers();",
		"        initPrefixHash(hash1, mod1);",
		"        initPrefixHash(hash2, mod2);",
		"    }",
		"",
		"    // Get the hash of the substring from index l to r",
		"    pair<int, int> getHash(int l, int r) {",
		"        return {computeHash(l, r, hash1, mod1, p_pow1), computeHash(l, r, hash2, mod2, p_pow2)};",
		"    }",
		"",
		"    // Combine two hashes to form the hash of their concatenation",
		"    pair<int, int> combineHash(pair<int, int> h1, pair<int, int> h2, int x) {",
		"        auto [h1_first, h1_second] = h1;",
		"        auto [h2_first, h2_second] = h2;",
		"",
		"        // x is the length of the second string",
		"        int combined_first = (h1_first * p_pow1[x] + h2_first ) % mod1;",
		"        int combined_second = (h1_second * p_pow2[x] + h2_second) % mod2;",
		"        ",
		"        return {combined_first, combined_second};",
		"    }",
		"};",
		"",
		"    // string s = \"hello\";",
		"    // SubstringHash hashObj(s,0);",
		"",
		"    // ",
		"    // auto [hash1_first, hash1_second] = hashObj.getHash(0, 2); // Hash of \"hel\"",
		"    // auto [hash2_first, hash2_second] = hashObj.getHash(3, 4); // Hash of \"lo\"",
		"",
		"    // auto [combined_first, combined_second] = hashObj.combineHash({hash1_first, hash1_second}, {hash2_first, hash2_second}, 2 (length of \"lo\"));",
		"    // This gives the has of \"hello\"",
		""
	],
	"description": "StringHashing"
	}

}