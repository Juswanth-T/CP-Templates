{
	"BinaryLifting": {
		"prefix": "binarylifting",
		"body": [
		  "class BinaryLifting",
		  "{",
		  "public:",
		  "",
		  "  int n,l; ",
		  "  vector<vector<int>> dp;",
		  "  vector<int> level;",
		  "",
		  "  // dp[i][j] -> Gives the parent at the distance of 2^j from the node i",
		  "  // 2^l is just greater than n; (In worst case by assuming its a skew tree)",
		  "",
		  "  BinaryLifting(int _n)",
		  "  {",
		  "    n = _n;",
		  "    l = ceil(log2l(n)) + 1;",
		  "    dp.resize(n);",
		  "    level.resize(n);",
		  "    for (auto &i : dp) i.resize(l + 2);",
		  "  }",
		  "",
		  "  void bulid(int src, int par, vector<vector<int>> &adj)",
		  "  {",
		  "    preprocess(src, par, adj);",
		  "    find_level(src, par, 0, adj, level);",
		  "  }",
		  "",
		  "  // preprocessing fills the dp array",
		  "  void preprocess(int src, int par, vector<vector<int>> &adj)",
		  "  {",
		  "    dp[src][0] = par;",
		  "    for (int i = 1; i < l; i++)",
		  "    {",
		  "      if (dp[src][i - 1] != -1) dp[src][i] = dp[dp[src][i - 1]][i - 1];",
		  "      else dp[src][i] = -1;",
		  "    }",
		  "",
		  "    for (auto child : adj[src])",
		  "    {",
		  "      if (child != par) preprocess(child, src, adj);",
		  "    }",
		  "    return;",
		  "  }",
		  "",
		  "  // find_level gets the level of each node in the tree starting from root as level 0.",
		  "  // Fills the level array",
		  "  void find_level(int src, int par, int lvl, vector<vector<int>> &adj, vector<int> &level)",
		  "  {",
		  "",
		  "    level[src] = lvl;",
		  "    for (auto child : adj[src])",
		  "    {",
		  "      if (child != par)",
		  "      {",
		  "        find_level(child, src, lvl + 1, adj, level);",
		  "      }",
		  "    }",
		  "    return;",
		  "  }",
		  "",
		  "  // lift_node gets the parent of node which at a distance jump_required from it",
		  "  int lift_node(int node, int jump_required)",
		  "  {",
		  "    for (int i = l-1; i >= 0; i--)",
		  "    {",
		  "      if (jump_required == 0 || node == -1) break;",
		  "      if ((jump_required >> i) & 1)",
		  "      {",
		  "        jump_required -= (1 << i);",
		  "        node = dp[node][i];",
		  "      }",
		  "    }",
		  "    return node;",
		  "  }",
		  "",
		  "  // lca(u,v) finds the lowest common ancestor of node u and v",
		  "  int lca(int u, int v)",
		  "  {",
		  "    if (level[u] < level[v]) swap(u, v);",
		  "    u = lift_node(u, level[u] - level[v]);",
		  "",
		  "    if (u == v) return u;",
		  "    for (int i = l; i >= 0; i--)",
		  "    {",
		  "      if (dp[u][i] != dp[v][i])",
		  "      {",
		  "        u = dp[u][i];",
		  "        v = dp[v][i];",
		  "      }",
		  "    }",
		  "",
		  "    return dp[u][0];",
		  "  }",
		  "",
		  "};",
		  "",
		  "",
		  "// BinaryLifting bl(n);  n is the no of nodes in a tree",
		  "// 0 based indexing is used. Parent of root is assumed to be -1.",
		  "// bl.build(root, -1 , adj). If you want 0 to be the root use bl.build(0,-1,adj);",
		  "// bl.dp[u][i] gives the 2^i th parent of u. (when i = 0, it gives its immediate parent)",
		  "// bl.lca(u,v) gives the lca."
		],
		"description": "BinaryLifting"
	  }
}